global !p

def get_quoting_style(snip):
    style = snip.opt("g:ultisnips_python_quoting_style", "double")
    if style == 'single':
        return "'"
    return '"'

def triple_quotes(snip):
    return get_quoting_style(snip) * 3


def find_package(snip):
    import os
    dirname = vim.eval('expand("%:p:h")') or ''
    package = []
    curdir = dirname
    while True:
        if os.path.isfile(os.path.join(curdir, '__init__.py')):
            package.append(os.path.basename(curdir))
            curdir = os.path.abspath(os.path.join(curdir, '..'))
            continue
        break

    if package:
        package.reverse()
        return '.'.join(package)
    return None

def find_module(snip):
    package = find_package(snip)
    if package:
        return '{0}.{1}'.format(package, snip.basename)
    return snip.basename
endglobal

snippet mmod "Minimal Python Module Header" b
# -*- coding: utf-8 -*-
`!p snip.rv = triple_quotes(snip)`
    ${1:`!p snip.rv = find_module(snip) or snip.fn`}
    `!p snip.rv = len(t[1] or find_module(snip) or snip.fn)*'~'`

    ${2:@todo: add description}
`!p snip.rv = triple_quotes(snip)`

$0
endsnippet

snippet mod "Basic Python Module Header" b
# -*- coding: utf-8 -*-
`!p snip.rv = triple_quotes(snip)`
    `!p
codeauthor = snip.opt('g:ultisnips_python_code_author', None)
if codeauthor is not None:
    snip.rv = ':codeauthor: {1}\n    '.format(snip.mkline(''), codeauthor)
`:copyright: © ${3:`!p
import datetime;
snip.rv = datetime.datetime.utcnow().strftime('%Y')
    `} by the ${4:`!p
snip.rv = snip.opt("g:ultisnips_python_project_team", "PROJECT NAME")
    `} Team, see AUTHORS for more details.
    :license: ${5:`!p snip.rv = snip.opt("g:ultisnips_python_project_license", "LICENSE NAME")`}, see LICENSE for more details.


    ${1:`!p snip.rv = find_module(snip) or snip.fn`}
    `!p snip.rv = len(t[1] or find_module(snip) or snip.fn)*'~'`

    ${2:@todo: add description}
`!p snip.rv = triple_quotes(snip)`

$0
endsnippet

snippet smod "Basic Python Module Header" b
# -*- coding: utf-8 -*-
`!p snip.rv = triple_quotes(snip)`
    `!p
codeauthor = snip.opt('g:ultisnips_python_code_author', None)
if codeauthor is not None:
    snip.rv = ':codeauthor: {1}'.format(snip.mkline(''), codeauthor)
`


    ${1:`!p snip.rv = find_module(snip) or snip.fn`}
    `!p snip.rv = len(t[1] or find_module(snip) or snip.fn)*'~'`

    ${2:@todo: add description}
`!p snip.rv = triple_quotes(snip)`

$0
endsnippet


snippet cod "UTF-8 Coding header" b
# -*- coding: utf-8 -*-
$0
endsnippet

snippet omod "Basic Python Module Header" b
# -*- coding: utf-8 -*-
`!p snip.rv = triple_quotes(snip)`
    ${1:`!p snip.rv = find_module(snip) or snip.fn`}
    `!p snip.rv = len(t[1] or find_module(snip) or snip.fn)*'~'`

    ${2:@todo: add description}

    `!p
codeauthor = snip.opt('g:ultisnips_python_code_author', None)
if codeauthor is not None:
    snip.rv = ':codeauthor: {1}\n    '.format(snip.mkline(''), codeauthor)
`:copyright: © ${3:`!p
import datetime;
snip.rv = datetime.datetime.utcnow().strftime('%Y')
    `} by the ${4:`!p
snip.rv = snip.opt("g:ultisnips_python_project_team", "PROJECT NAME")
    `} Team, see AUTHORS for more details.
    :license: ${5:`!p snip.rv = snip.opt("g:ultisnips_python_project_license", "LICENSE NAME")`}, see LICENSE for more details.
`!p snip.rv = triple_quotes(snip)`

$0
endsnippet

snippet log "Instantiate a logging instance" !b
log = logging.getLogger(__name__)
endsnippet

snippet pudb "Import and setup pudb set trace" !b
from pudb import set_trace; set_trace()
endsnippet

snippet pylint "Add a PyLint disable comment"
# pylint: disable=
endsnippet

snippet pp "pprint.pprint()"
pprint.pprint(${1})
endsnippet

snippet ppp "import pprint; pprint.pprint()"
import pprint
pprint.pprint(${1})
endsnippet

# vim:ft=snippets:
